#define UNIX_BUILD

#include <ros/ros.h> 
#include <std_msgs/String.h>
#include <sensor_msgs/Imu.h>
#include "mscl/mscl.h" 
#include "mscl/Types.h" 
#include "mscl/Communication/Connection.h" 
#include "mscl/MicroStrain/Inertial/InertialNode.h" 
#include "mscl/Exceptions.h" 
#include "mscl/MicroStrain/MIP/MipTypes.h"

int main(int argc, char** argv) {
	ros::init(argc, argv, "hello_world_node");
	
//	ros::start();
	ros::NodeHandle n;
//	ros::Publisher chatter_pub =n.advertise<std_msgs::String>("chatter", 1000);
	ros::Publisher chatter_pub = n.advertise<sensor_msgs::Imu>("imu/data_raw", 1000);
	ros::Rate loop_rate(10);
	
	sensor_msgs::Imu msg_gps_imu;
	
	while (ros::ok()) {
//		std_msgs::String msg;
//		msg.data = "hi";
//		chatter_pub.publish(msg);
//		ros::spinOnce();
//		loop_rate.sleep();
		sensor_msgs::Imu imu_msg;
		imu_msg.header.stamp = ros::Time::now();
		imu_msg.header.frame_id = "/base_link";
		imu_msg.

	}
//	std_msgs::String imu_msg;
//	ros::Publisher imu("imu", msg_gps_imu);
//	ros::NodeHandle nh;

//	nh.initNode();
//	nh.advertise(imu);
	try {
		ROS_INFO_STREAM("making connection...");
		mscl::Connection connection = mscl::Connection::Serial("/dev/ttyACM0");
		mscl::InertialNode node(connection);
		if (node.ping()) {
			ROS_INFO_STREAM("connected!");
		}

		//imu_pub_ = node.advertise<sensor_msgs::Imu>("imu/data", 100);
		//imu_pub_.publish(imu_msg_);

	}

	catch(mscl::Error& e) {
		ROS_FATAL(e.what());
	}

	//ros::Publisher pubTest;
	
	//pubTest.publish("1");
	//ros::NodeHandle pnh("~");
	//pubTest = pnh.advertise<std_msgs::String>("chatter", 1000);
	//ros::spin();
	//ros::shutdown();

	return 0;
}
